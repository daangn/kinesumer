// Code generated by MockGen. DO NOT EDIT.
// Source: statestore.go

// Package kinesumer is a generated GoMock package.
package kinesumer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStateStore is a mock of StateStore interface.
type MockStateStore struct {
	ctrl     *gomock.Controller
	recorder *MockStateStoreMockRecorder
}

// MockStateStoreMockRecorder is the mock recorder for MockStateStore.
type MockStateStoreMockRecorder struct {
	mock *MockStateStore
}

// NewMockStateStore creates a new mock instance.
func NewMockStateStore(ctrl *gomock.Controller) *MockStateStore {
	mock := &MockStateStore{ctrl: ctrl}
	mock.recorder = &MockStateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateStore) EXPECT() *MockStateStoreMockRecorder {
	return m.recorder
}

// DeregisterClient mocks base method.
func (m *MockStateStore) DeregisterClient(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterClient", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterClient indicates an expected call of DeregisterClient.
func (mr *MockStateStoreMockRecorder) DeregisterClient(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterClient", reflect.TypeOf((*MockStateStore)(nil).DeregisterClient), ctx, clientID)
}

// GetShards mocks base method.
func (m *MockStateStore) GetShards(ctx context.Context, stream string) (Shards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShards", ctx, stream)
	ret0, _ := ret[0].(Shards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShards indicates an expected call of GetShards.
func (mr *MockStateStoreMockRecorder) GetShards(ctx, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShards", reflect.TypeOf((*MockStateStore)(nil).GetShards), ctx, stream)
}

// ListAllAliveClientIDs mocks base method.
func (m *MockStateStore) ListAllAliveClientIDs(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAliveClientIDs", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAliveClientIDs indicates an expected call of ListAllAliveClientIDs.
func (mr *MockStateStoreMockRecorder) ListAllAliveClientIDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAliveClientIDs", reflect.TypeOf((*MockStateStore)(nil).ListAllAliveClientIDs), ctx)
}

// ListCheckPoints mocks base method.
func (m *MockStateStore) ListCheckPoints(ctx context.Context, stream string, shardIDs []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCheckPoints", ctx, stream, shardIDs)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckPoints indicates an expected call of ListCheckPoints.
func (mr *MockStateStoreMockRecorder) ListCheckPoints(ctx, stream, shardIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckPoints", reflect.TypeOf((*MockStateStore)(nil).ListCheckPoints), ctx, stream, shardIDs)
}

// PingClientAliveness mocks base method.
func (m *MockStateStore) PingClientAliveness(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingClientAliveness", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingClientAliveness indicates an expected call of PingClientAliveness.
func (mr *MockStateStoreMockRecorder) PingClientAliveness(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingClientAliveness", reflect.TypeOf((*MockStateStore)(nil).PingClientAliveness), ctx, clientID)
}

// PruneClients mocks base method.
func (m *MockStateStore) PruneClients(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneClients", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneClients indicates an expected call of PruneClients.
func (mr *MockStateStoreMockRecorder) PruneClients(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneClients", reflect.TypeOf((*MockStateStore)(nil).PruneClients), ctx)
}

// RegisterClient mocks base method.
func (m *MockStateStore) RegisterClient(ctx context.Context, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClient", ctx, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterClient indicates an expected call of RegisterClient.
func (mr *MockStateStoreMockRecorder) RegisterClient(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClient", reflect.TypeOf((*MockStateStore)(nil).RegisterClient), ctx, clientID)
}

// UpdateCheckPoints mocks base method.
func (m *MockStateStore) UpdateCheckPoints(ctx context.Context, checkpoints []*shardCheckPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckPoints", ctx, checkpoints)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCheckPoints indicates an expected call of UpdateCheckPoints.
func (mr *MockStateStoreMockRecorder) UpdateCheckPoints(ctx, checkpoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckPoints", reflect.TypeOf((*MockStateStore)(nil).UpdateCheckPoints), ctx, checkpoints)
}

// UpdateShards mocks base method.
func (m *MockStateStore) UpdateShards(ctx context.Context, stream string, shards Shards) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShards", ctx, stream, shards)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShards indicates an expected call of UpdateShards.
func (mr *MockStateStoreMockRecorder) UpdateShards(ctx, stream, shards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShards", reflect.TypeOf((*MockStateStore)(nil).UpdateShards), ctx, stream, shards)
}
